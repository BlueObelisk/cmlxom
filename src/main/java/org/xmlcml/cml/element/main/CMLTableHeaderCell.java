// /*======AUTOGENERATED FROM SCHEMA; DO NOT EDIT BELOW THIS LINE ======*/
package org.xmlcml.cml.element.main;

import java.io.IOException;
import java.io.Writer;

import nu.xom.Element;
import nu.xom.Node;

import org.xmlcml.cml.base.CMLElement;
import org.xmlcml.cml.element.lite.CMLArray;

/** Metadata for a column of a table.
*
*
* Must be used in conjunction with multiplierToSI and/or constantToSI
*
* user-modifiable class autogenerated from schema if no class exists
* use as a shell which can be edited
* the autogeneration software will not overwrite an existing class file

*/
public class CMLTableHeaderCell extends org.xmlcml.cml.element.main.AbstractTableHeaderCell {

    /** must give simple documentation.
    *

    */

    public CMLTableHeaderCell() {
    }
    /** must give simple documentation.
    *
    * @param old CMLTableHeaderCell to copy

    */

    public CMLTableHeaderCell(CMLTableHeaderCell old) {
        super((org.xmlcml.cml.element.main.AbstractTableHeaderCell) old);
    }

    /** copy node .
    *
    * @return Node
    */
    public Node copy() {
        return new CMLTableHeaderCell(this);
    }
    /** create new instance in context of parent, overridable by subclasses.
    *
    * @param parent parent of element to be constructed (ignored by default)
    * @return CMLTableHeaderCell
    */
    public CMLElement makeElementInContext(Element parent) {
        return new CMLTableHeaderCell();
    }

    /** create CMLArray with attributes from this.
     *
     * @return array
     */
    public CMLArray createCMLArray() {
        CMLArray array = new CMLArray();
        if (this.getDataTypeAttribute() != null) {
            array.setDataType(this.getDataType());
        }
        if (this.getDictRefAttribute() != null) {
            array.setDictRef(this.getDictRef());
        }
        if (this.getTitleAttribute() != null) {
            array.setTitle(this.getTitle());
        }
        if (this.getConventionAttribute() != null) {
            array.setConvention(this.getConvention());
        }
        if (this.getIdAttribute() != null) {
            array.setId(this.getId());
        }
        return array;
    }

    /** write as HTML.
     *
     * @param w writer
     * @throws IOException
     */
    public void writeHTML(Writer w) throws IOException {
        String dictRef = this.getDictRef();
        w.write("<th");
        if (dictRef != null) {
            w.write(" class='" + dictRef + "'");
        }
        w.write(">");
        w.write(this.getTitle());
        w.write("</th>");
    }
}
