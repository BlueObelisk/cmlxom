package org.xmlcml.cml.element;

import java.util.ArrayList;
import java.util.List;

import nu.xom.Element;
import nu.xom.Node;

import org.xmlcml.cml.base.CMLConstants;
import org.xmlcml.cml.base.CMLElement;
import org.xmlcml.cml.base.CMLElements;
import org.xmlcml.cml.base.CMLUtil;

/**
 * user-modifiable class supporting list. * autogenerated from schema use as a
 * shell which can be edited
 *
 */
public class CMLList extends org.xmlcml.cml.element.AbstractList {

	/** namespaced element name.*/
	public final static String NS = C_E+TAG;

    /**
     * constructor.
     */
    public CMLList() {
    }

    /**
     * constructor.
     *
     * @param old
     */
    public CMLList(CMLList old) {
        super((AbstractList) old);

    }

    /**
     * copy node .
     *
     * @return Node
     */
    public Node copy() {
        return new CMLList(this);

    }

    /**
     * create new instance in context of parent, overridable by subclasses.
     *
     * @param parent
     *            parent of element to be constructed (ignored by default)
     * @return CMLList
     */
    public CMLElement makeElementInContext(Element parent) {
        return new CMLList();
    }

    /** adds the array as a column to the tableRows.
     *
     * @param tableRows
     */
    public void addColumnElementsTo(CMLElements<CMLTableRow> tableRows) {
        List<Node> nodes = CMLUtil.getQueryNodes(this, CMLConstants.S_STAR);
        if (nodes.size() != tableRows.size()) {
            throw new RuntimeException("inconsistent column size: "+
                    nodes.size()+" expected "+tableRows.size());
        }
        int j = 0;
        Class<?> classx = null;
        for (Node node : nodes) {
            if (classx == null) {
                classx = node.getClass();
            } else if (classx != node.getClass()) {
                throw new RuntimeException("incompatible classes "+
                        node.getClass() +" expected "+classx);
            }
            tableRows.get(j++).appendChild(new CMLTableCell((Element)node));
        }
    }

    /** get size of array.
     * @return size
     */
    public int getArraySize() {
        List<Node> nodeList = CMLUtil.getQueryNodes(this, CMLConstants.S_STAR);
        return nodeList.size();
    }

    /** get array elements.
     * recalcuates each time so best cached for frequent use
     * @return elements as String
     */
    public List<String> getStringValues() {
        List<Node> nodeList = CMLUtil.getQueryNodes(this, CMLConstants.S_STAR);
        List<String> stringList = new ArrayList<String>();
        for (Node node : nodeList) {
            stringList.add(node.getValue());
        }
        return stringList;
    }
}
